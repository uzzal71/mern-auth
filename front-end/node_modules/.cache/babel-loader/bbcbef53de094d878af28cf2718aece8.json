{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\linkedin\\\\mern-auth\\\\front-end\\\\src\\\\pages\\\\UserInfoPage.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserInfoPage = () => {\n  _s();\n\n  // We'll use the history to navigate the user\n  // programmatically later on (we're not using it yet)\n  const history = useHistory(); // These states are bound to the values of the text inputs\n  // on the page (see JSX below). \n\n  const [favoriteFood, setFavoriteFood] = useState('');\n  const [hairColor, setHairColor] = useState('');\n  const [bio, setBio] = useState(''); // These state variables control whether or not we show\n  // the success and error message sections after making\n  // a network request (see JSX below).\n\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false); // This useEffect hook automatically hides the\n  // success and error messages after 3 seconds when they're shown.\n  // Just a little user interface improvement.\n\n  useEffect(() => {\n    if (showSuccessMessage || showErrorMessage) {\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n        setShowErrorMessage(false);\n      }, 3000);\n    }\n  }, [showSuccessMessage, showErrorMessage]);\n\n  const saveChanges = async () => {\n    // Send a request to the server to\n    // update the user's info with any changes we've\n    // made to the text input values\n    alert('Save functionality not implemented yet');\n  };\n\n  const logOut = () => {\n    // We'll want to log the user out here\n    // and send them to the \"login page\"\n    alert('Log out functionality not implemented yet');\n  };\n\n  const resetValues = () => {\n    // Reset the text input values to\n    // their starting values (the data we loaded from the server)\n    alert('Reset functionality not implemented yet');\n  }; // And here we have the JSX for our component. It's pretty straightforward\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Info for ______\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), showSuccessMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success\",\n      children: \"Successfully saved user data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 36\n    }, this), showErrorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fail\",\n      children: \"Uh oh... something went wrong and we couldn't save changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Favorite Food:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setFavoriteFood(e.target.value),\n        value: favoriteFood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Hair Color:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setHairColor(e.target.value),\n        value: hairColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Bio:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setBio(e.target.value),\n        value: bio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveChanges,\n      children: \"Save Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetValues,\n      children: \"Reset Values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logOut,\n      children: \"Log Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserInfoPage, \"XDTIgfSke54vkO1JVqmnDVHnLvI=\", false, function () {\n  return [useHistory];\n});\n\n_c = UserInfoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserInfoPage\");","map":{"version":3,"sources":["C:/Users/user/OneDrive/Desktop/linkedin/mern-auth/front-end/src/pages/UserInfoPage.js"],"names":["useState","useEffect","useHistory","UserInfoPage","history","favoriteFood","setFavoriteFood","hairColor","setHairColor","bio","setBio","showSuccessMessage","setShowSuccessMessage","showErrorMessage","setShowErrorMessage","setTimeout","saveChanges","alert","logOut","resetValues","e","target","value"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport const UserInfoPage = () => {\n    // We'll use the history to navigate the user\n    // programmatically later on (we're not using it yet)\n    const history = useHistory();\n\n    // These states are bound to the values of the text inputs\n    // on the page (see JSX below). \n    const [favoriteFood, setFavoriteFood] = useState('');\n    const [hairColor, setHairColor] = useState('');\n    const [bio, setBio] = useState('');\n\n    // These state variables control whether or not we show\n    // the success and error message sections after making\n    // a network request (see JSX below).\n    const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n    const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n    // This useEffect hook automatically hides the\n    // success and error messages after 3 seconds when they're shown.\n    // Just a little user interface improvement.\n    useEffect(() => {\n        if (showSuccessMessage || showErrorMessage) {\n            setTimeout(() => {\n                setShowSuccessMessage(false);\n                setShowErrorMessage(false);\n            }, 3000);\n        }\n    }, [showSuccessMessage, showErrorMessage]);\n\n    const saveChanges = async () => {\n        // Send a request to the server to\n        // update the user's info with any changes we've\n        // made to the text input values\n        alert('Save functionality not implemented yet');\n    }\n\n    const logOut = () => {\n        // We'll want to log the user out here\n        // and send them to the \"login page\"\n        alert('Log out functionality not implemented yet');\n    }\n    \n    const resetValues = () => {\n        // Reset the text input values to\n        // their starting values (the data we loaded from the server)\n        alert('Reset functionality not implemented yet');\n    }\n    \n    // And here we have the JSX for our component. It's pretty straightforward\n    return (\n        <div className=\"content-container\">\n            <h1>Info for ______</h1>\n            {showSuccessMessage && <div className=\"success\">Successfully saved user data!</div>}\n            {showErrorMessage && <div className=\"fail\">Uh oh... something went wrong and we couldn't save changes</div>}\n            <label>\n                Favorite Food:\n                <input\n                    onChange={e => setFavoriteFood(e.target.value)}\n                    value={favoriteFood} />\n            </label>\n            <label>\n                Hair Color:\n                <input\n                    onChange={e => setHairColor(e.target.value)}\n                    value={hairColor} />\n            </label>\n            <label>\n                Bio:\n                <input\n                    onChange={e => setBio(e.target.value)}\n                    value={bio} />\n            </label>\n            <hr />\n            <button onClick={saveChanges}>Save Changes</button>\n            <button onClick={resetValues}>Reset Values</button>\n            <button onClick={logOut}>Log Out</button>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}